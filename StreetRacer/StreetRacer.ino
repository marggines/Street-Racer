#include <Arduboy2.h>
#include <ArduboyTones.h>
Arduboy2 arduboy;

Arduboy2Audio audio;
ArduboyTones sound(arduboy.audio.enabled);

// FUNCTIONS PROTOTYPES
void anim_crash(int,int);
void audio_settings();
void check_cars_collision();
void count_screen();
void game_over();
void refresh_cars();
void select_car();
void select_game_mode();
void title();
void update_car_frames();
void initalize_cars_postions();
void initialize_user_car();
void demo_car_1(byte);
void demo_car_2();
void anim_crash_car(byte);
void show_flag();

#define GAME_TITLE 0
#define GAME_SELECT_GAME_MODE 1
#define GAME_SELECT_CAR 2
#define GAME_COUNT_SCREEN 3
#define GAME_OVER_SCREEN 4
#define GAME_TIME_MODE 5 
#define GAME_UNLIMITED_TIME_MODE 6
byte game_stage = GAME_TITLE;

#define no_of_type_cars 11      //number of types cars
#define no_of_left_cars 3       //max number of cars from right side
#define no_of_right_cars 1      //max number of cars from right side

#define car_width 28            //width of the car sprite
#define car_height 14           //height of the car sprite

constexpr uint8_t frameRate = 30;

int time_game = 30;             //value is set in select_game_mode()
byte game_type = 0;           // 0 => time mode, 1 => unlimited time mode (value is set in select_game_mode())
unsigned long last_time;        //to count time game.

#define number_of_levels 33
int selected_level = 0;
int last_selected_level = 1;
byte levels_seeds[number_of_levels] = {10,11,12,13,14,15,16,17,18,19,110,10,11,12,13,14,15,16,17,18,19,110,10,11,12,13,14,15,16,17,18,19,110};
int selected_game_mode = 0;
int last_selected_game_mode = 1;
int hi_score = 0;
int score = 0;
int car_crashes = 0;

byte tracks[] = {1, 17, 33, 48};

int lives = 3;               //uses only for unlimited time game mode
byte my_car = 0;
byte my_speed = 1;
byte max_speed = 5;
byte my_car_track = 3;
byte min_speed_left_cars = 1;
byte max_speed_left_cars = 4;

int playerx = 5;
int playery = tracks[3];

byte car_frame = 1;
uint8_t user_car_frame = 1;

int road_speed = 0;


int left_cars_x[no_of_left_cars] = {};
int left_cars_y[no_of_left_cars] = {};
int left_cars_speed[no_of_left_cars] = {};
int left_cars_selected_car[no_of_left_cars] = {};

int right_cars_x[no_of_right_cars] = {};
int right_cars_y[no_of_right_cars] = {};
int right_cars_speed[no_of_right_cars] = {};
int right_cars_selected_car[no_of_right_cars] = {};


const uint8_t PROGMEM cars_right[no_of_type_cars][258] = {
    {
        32, 16,
        0xe0, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x03, 0x03, 0x03, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x0f, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 

        0xe0, 0x78, 0x44, 0xc4, 0xc6, 0xc2, 0xc2, 0xc2, 0xc2, 0xde, 0x62, 0x4a, 0xfe, 0xd6, 0xda, 0xe2, 0xd2, 0xf2, 0xc4, 0xc8, 0xd0, 0xf0, 0xe0, 0xe0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x09, 0x03, 0x0a, 0x03, 0x1d, 0x32, 0x22, 0x26, 0x1d, 0x03, 0x0f, 0x0b, 0x0d, 0x0b, 0x0d, 0x0b, 0x0d, 0x0f, 0x03, 0x1d, 0x32, 0x22, 0x26, 0x1d, 0x03, 0x0e, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 

        0xe0, 0x78, 0x44, 0xc4, 0xc6, 0xc2, 0xc2, 0xc2, 0xc2, 0xde, 0x62, 0x4a, 0xfe, 0xd6, 0xda, 0xe2, 0xd2, 0xf2, 0xc4, 0xc8, 0xd0, 0xf0, 0xe0, 0xe0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x0b, 0x02, 0x03, 0x1d, 0x26, 0x22, 0x32, 0x1d, 0x03, 0x0f, 0x0b, 0x0d, 0x0b, 0x0d, 0x0b, 0x0d, 0x0f, 0x03, 0x1d, 0x26, 0x22, 0x32, 0x1d, 0x03, 0x0e, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 

        0xe0, 0x78, 0x44, 0xc4, 0xc6, 0xc2, 0xc2, 0xc2, 0xc2, 0xde, 0x62, 0x4a, 0xfe, 0xd6, 0xda, 0xe2, 0xd2, 0xf2, 0xc4, 0xc8, 0xd0, 0xf0, 0xe0, 0xe0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x03, 0x02, 0x03, 0x1d, 0x22, 0x22, 0x22, 0x1d, 0x03, 0x0f, 0x0b, 0x0d, 0x0b, 0x0d, 0x0b, 0x0d, 0x0f, 0x03, 0x1d, 0x22, 0x22, 0x22, 0x1d, 0x03, 0x0e, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0x54, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 

        0x54, 0xfe, 0xf3, 0xa1, 0xe1, 0xa1, 0xe1, 0xa1, 0xf3, 0xbf, 0xf3, 0xe1, 0xfd, 0xed, 0xe9, 0xa1, 0xf3, 0xff, 0xf1, 0xa1, 0xfd, 0xe9, 0xe1, 0xe2, 0xe4, 0xb8, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x06, 0x0b, 0x06, 0x0b, 0x07, 0x0b, 0x07, 0x0b, 0x07, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 

        0x54, 0xfe, 0xf3, 0xa1, 0xe1, 0xa1, 0xe1, 0xa1, 0xf3, 0xbf, 0xf3, 0xe1, 0xfd, 0xed, 0xe9, 0xa1, 0xf3, 0xff, 0xf1, 0xa1, 0xfd, 0xe9, 0xe1, 0xe2, 0xe4, 0xb8, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x06, 0x0b, 0x06, 0x0b, 0x07, 0x0b, 0x07, 0x0b, 0x07, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 

        0x54, 0xfe, 0xf3, 0xa1, 0xe1, 0xa1, 0xe1, 0xa1, 0xf3, 0xbf, 0xf3, 0xe1, 0xfd, 0xed, 0xe9, 0xa1, 0xf3, 0xff, 0xf1, 0xa1, 0xfd, 0xe9, 0xe1, 0xe2, 0xe4, 0xb8, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x01, 0x1c, 0x22, 0x2a, 0x22, 0x1c, 0x01, 0x06, 0x0b, 0x06, 0x0b, 0x07, 0x0b, 0x07, 0x0b, 0x07, 0x01, 0x1c, 0x22, 0x2a, 0x22, 0x1c, 0x01, 0x07, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x00, 0x00, 0x80, 0x40, 0x40, 0xa0, 0xe0, 0xe0, 0xc0, 0xb0, 0xf8, 0x90, 0xc0, 0xa4, 0xcc, 0x98, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x0f, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0f, 0x09, 0x0e, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x0c, 0x0d, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x00, 0x00, 0x80, 0x40, 0x40, 0xa0, 0xe0, 0xe0, 0xc0, 0xb0, 0xf8, 0x90, 0xc0, 0xa4, 0xcc, 0x98, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x0f, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0f, 0x09, 0x0e, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x0c, 0x0d, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x00, 0x00, 0x80, 0x40, 0x40, 0xa0, 0xe0, 0xe0, 0xc0, 0xb0, 0xf8, 0x90, 0xc0, 0xa4, 0xcc, 0x98, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x0f, 0x03, 0x19, 0x25, 0x25, 0x25, 0x19, 0x03, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0f, 0x09, 0x0e, 0x03, 0x19, 0x25, 0x25, 0x25, 0x19, 0x03, 0x0c, 0x0d, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0xbe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 

        0xbe, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xff, 0xfe, 0x00, 0xfe, 0xf1, 0xa1, 0xa5, 0xfd, 0xcd, 0xe1, 0xd2, 0xfc, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x0f, 0x0e, 0x0a, 0x07, 0x0a, 0x06, 0x0b, 0x06, 0x0e, 0x0f, 0x0f, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x0f, 0x0a, 0x00, 0x00, 0x00, 0x00, 

        0xbe, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xff, 0xfe, 0x00, 0xfe, 0xf1, 0xa1, 0xa5, 0xfd, 0xcd, 0xe1, 0xd2, 0xfc, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x0f, 0x0e, 0x0a, 0x07, 0x0a, 0x06, 0x0b, 0x06, 0x0e, 0x0f, 0x0f, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x0f, 0x0a, 0x00, 0x00, 0x00, 0x00, 

        0xbe, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xfe, 0xd5, 0xeb, 0xff, 0xfe, 0x00, 0xfe, 0xf1, 0xa1, 0xa5, 0xfd, 0xcd, 0xe1, 0xd2, 0xfc, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x01, 0x1c, 0x22, 0x2a, 0x22, 0x1c, 0x01, 0x0f, 0x0e, 0x0a, 0x07, 0x0a, 0x06, 0x0b, 0x06, 0x0e, 0x0f, 0x0f, 0x01, 0x1c, 0x22, 0x2a, 0x22, 0x1c, 0x01, 0x0f, 0x0a, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0xc4, 0xe4, 0xfc, 0xf4, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x03, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x44, 0x64, 0xdc, 0xe4, 0xd0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe8, 0xd4, 0xec, 0xc4, 0x84, 0xf4, 0xa4, 0x88, 0x88, 0xd0, 0x90, 0xa0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x03, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x17, 0x0f, 0x17, 0x0f, 0x16, 0x0f, 0x17, 0x0f, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x0f, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x44, 0x64, 0xdc, 0xe4, 0xd0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe8, 0xd4, 0xec, 0xc4, 0x84, 0xf4, 0xa4, 0x88, 0x88, 0xd0, 0x90, 0xa0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x03, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x17, 0x0f, 0x17, 0x0f, 0x16, 0x0f, 0x17, 0x0f, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x0f, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x44, 0x64, 0xdc, 0xe4, 0xd0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe8, 0xd4, 0xec, 0xc4, 0x84, 0xf4, 0xa4, 0x88, 0x88, 0xd0, 0x90, 0xa0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x01, 0x03, 0x03, 0x19, 0x25, 0x25, 0x25, 0x19, 0x03, 0x17, 0x0f, 0x17, 0x0f, 0x16, 0x0f, 0x17, 0x0f, 0x03, 0x19, 0x25, 0x25, 0x25, 0x19, 0x03, 0x0f, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 

        0x80, 0xc0, 0xc0, 0xe0, 0xa0, 0xd0, 0xa8, 0xd4, 0xaa, 0xc6, 0xc2, 0xc2, 0x42, 0xfa, 0xd2, 0xc2, 0xc2, 0xe4, 0xc8, 0xd0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0e, 0x03, 0x1d, 0x3a, 0x22, 0x2e, 0x1d, 0x03, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x03, 0x1d, 0x3a, 0x22, 0x2e, 0x1d, 0x03, 0x0f, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 

        0x80, 0xc0, 0xc0, 0xe0, 0xa0, 0xd0, 0xa8, 0xd4, 0xaa, 0xc6, 0xc2, 0xc2, 0x42, 0xfa, 0xd2, 0xc2, 0xc2, 0xe4, 0xc8, 0xd0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0e, 0x03, 0x1d, 0x26, 0x36, 0x32, 0x1d, 0x03, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x03, 0x1d, 0x26, 0x36, 0x32, 0x1d, 0x03, 0x0f, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 
      
        0x80, 0xc0, 0xc0, 0xe0, 0xa0, 0xd0, 0xa8, 0xd4, 0xaa, 0xc6, 0xc2, 0xc2, 0x42, 0xfa, 0xd2, 0xc2, 0xc2, 0xe4, 0xc8, 0xd0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0e, 0x03, 0x1d, 0x22, 0x22, 0x22, 0x1d, 0x03, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x03, 0x1d, 0x22, 0x22, 0x22, 0x1d, 0x03, 0x0f, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00,  
    },
    {
        32, 16,
        0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 

        0x80, 0xc0, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0xa0, 0xde, 0xbf, 0xd1, 0xa1, 0xfd, 0xe9, 0xe1, 0xf1, 0xe2, 0xec, 0xf0, 0xe0, 0xe0, 0xa0, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0f, 0x1f, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x0e, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x1a, 0x1d, 0x1e, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 
        
        0x80, 0xc0, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0xa0, 0xde, 0xbf, 0xd1, 0xa1, 0xfd, 0xe9, 0xe1, 0xf1, 0xe2, 0xec, 0xf0, 0xe0, 0xe0, 0xa0, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0f, 0x1f, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x0e, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x1a, 0x1d, 0x1e, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 
       
        0x80, 0xc0, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0xa0, 0xde, 0xbf, 0xd1, 0xa1, 0xfd, 0xe9, 0xe1, 0xf1, 0xe2, 0xec, 0xf0, 0xe0, 0xe0, 0xa0, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0f, 0x1f, 0x01, 0x1c, 0x22, 0x2a, 0x22, 0x1c, 0x01, 0x0e, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x1a, 0x1d, 0x1e, 0x01, 0x1c, 0x22, 0x2a, 0x22, 0x1c, 0x01, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 

        0x7e, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0x6b, 0x55, 0xff, 0xe1, 0x41, 0x7d, 0xc9, 0xc1, 0xe3, 0xd2, 0xe2, 0xc4, 0xd8, 0xe0, 0xc0, 0xc0, 0xc0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x0e, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x1f, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1f, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x00, 

        0x7e, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0x6b, 0x55, 0xff, 0xe1, 0x41, 0x7d, 0xc9, 0xc1, 0xe3, 0xd2, 0xe2, 0xc4, 0xd8, 0xe0, 0xc0, 0xc0, 0xc0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x0e, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x1f, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1f, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x00, 

        0x7e, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0x6b, 0x55, 0xff, 0xe1, 0x41, 0x7d, 0xc9, 0xc1, 0xe3, 0xd2, 0xe2, 0xc4, 0xd8, 0xe0, 0xc0, 0xc0, 0xc0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x0e, 0x03, 0x19, 0x25, 0x25, 0x25, 0x19, 0x03, 0x1f, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1f, 0x03, 0x19, 0x25, 0x25, 0x25, 0x19, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0xf0, 0xfe, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe4, 0xee, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xee, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xce, 0x8e, 0x00, 0x00, 0x00, 0x00, 
        0x0c, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0c, 0x00, 0x00, 0x00, 0x00, 

        0xd0, 0x6e, 0x50, 0x60, 0x50, 0x60, 0x50, 0x60, 0x64, 0x4a, 0x6d, 0x5b, 0x7d, 0x5b, 0x7d, 0x5b, 0x6d, 0x4a, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x4e, 0x8e, 0x00, 0x00, 0x00, 0x00, 
        0x0c, 0x12, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x21, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 

        0xd0, 0x6e, 0x50, 0x60, 0x50, 0x60, 0x50, 0x60, 0x64, 0x4a, 0x6d, 0x5b, 0x7d, 0x5b, 0x7d, 0x5b, 0x6d, 0x4a, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x4e, 0x8e, 0x00, 0x00, 0x00, 0x00, 
        0x0c, 0x12, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 

        0xd0, 0x6e, 0x50, 0x60, 0x50, 0x60, 0x50, 0x60, 0x64, 0x4a, 0x6d, 0x5b, 0x7d, 0x5b, 0x7d, 0x5b, 0x6d, 0x4a, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x4e, 0x8e, 0x00, 0x00, 0x00, 0x00, 
        0x0c, 0x12, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x21, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0f, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 
  
        0x54, 0x7e, 0x63, 0xc1, 0x41, 0xff, 0x41, 0xf9, 0x51, 0xc1, 0x7f, 0xc1, 0x79, 0xd1, 0x41, 0xff, 0x41, 0xf9, 0x51, 0xc1, 0xff, 0x41, 0x7d, 0xc9, 0xe2, 0xd4, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0f, 0x07, 0x1b, 0x2d, 0x25, 0x35, 0x1b, 0x07, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x07, 0x1b, 0x2d, 0x25, 0x35, 0x1b, 0x07, 0x1f, 0x0f, 0x05, 0x00, 0x00, 0x00, 0x00, 

        0x54, 0x7e, 0x63, 0xc1, 0x41, 0xff, 0x41, 0xf9, 0x51, 0xc1, 0x7f, 0xc1, 0x79, 0xd1, 0x41, 0xff, 0x41, 0xf9, 0x51, 0xc1, 0xff, 0x41, 0x7d, 0xc9, 0xe2, 0xd4, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0f, 0x07, 0x1b, 0x35, 0x25, 0x2d, 0x1b, 0x07, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x07, 0x1b, 0x35, 0x25, 0x2d, 0x1b, 0x07, 0x1f, 0x0f, 0x05, 0x00, 0x00, 0x00, 0x00, 
         
        0x54, 0x7e, 0x63, 0xc1, 0x41, 0xff, 0x41, 0xf9, 0x51, 0xc1, 0x7f, 0xc1, 0x79, 0xd1, 0x41, 0xff, 0x41, 0xf9, 0x51, 0xc1, 0xff, 0x41, 0x7d, 0xc9, 0xe2, 0xd4, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 
        0x06, 0x0f, 0x07, 0x1b, 0x25, 0x25, 0x25, 0x1b, 0x07, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x07, 0x1b, 0x25, 0x25, 0x25, 0x1b, 0x07, 0x1f, 0x0f, 0x05, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        
        32, 16,
        0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xf6, 0xff, 0xfd, 0xf9, 0xf0, 0xf0, 0xf0, 0xf2, 0xf4, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0xb6, 0xff, 0xfd, 0xe9, 0xa0, 0xa0, 0xa0, 0xd2, 0xe4, 0x48, 0x70, 0xf0, 0x50, 0x60, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x1e, 0x23, 0x2d, 0x2d, 0x39, 0x1e, 0x08, 0x0f, 0x0e, 0x11, 0x1b, 0x0e, 0x05, 0x03, 0x0f, 0x00, 0x1e, 0x23, 0x2f, 0x2d, 0x31, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    
        0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0xb6, 0xff, 0xfd, 0xe9, 0xa0, 0xa0, 0xa0, 0xd2, 0xe4, 0x48, 0x70, 0xf0, 0x50, 0x60, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x1e, 0x31, 0x2d, 0x2d, 0x2b, 0x1e, 0x08, 0x0f, 0x0e, 0x11, 0x1b, 0x0e, 0x05, 0x03, 0x0f, 0x00, 0x1e, 0x31, 0x2f, 0x2d, 0x23, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    
        0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0xb6, 0xff, 0xfd, 0xe9, 0xa0, 0xa0, 0xa0, 0xd2, 0xe4, 0x48, 0x70, 0xf0, 0x50, 0x60, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x1e, 0x21, 0x2d, 0x2d, 0x29, 0x1e, 0x08, 0x0f, 0x0e, 0x11, 0x1b, 0x0e, 0x05, 0x03, 0x0f, 0x00, 0x1e, 0x21, 0x2f, 0x2d, 0x21, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    }

};
      
const uint8_t PROGMEM cars_left[no_of_type_cars][194] = {
    {
        32, 16,
        0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 
        0x03, 0x07, 0x0f, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 

        0x00, 0x80, 0x40, 0x40, 0xe0, 0xe0, 0xf0, 0xd0, 0xc8, 0xc4, 0xf2, 0xd2, 0xe2, 0xda, 0xd6, 0xfe, 0x4a, 0x62, 0xde, 0xc2, 0xc2, 0xc2, 0xc2, 0xc6, 0xc4, 0x4c, 0x78, 0xe0, 0x00, 0x00, 0x00, 0x00, 
        0x03, 0x06, 0x0e, 0x03, 0x1d, 0x26, 0x22, 0x32, 0x1d, 0x03, 0x0f, 0x0d, 0x0b, 0x0d, 0x0b, 0x0d, 0x0b, 0x0f, 0x03, 0x1d, 0x26, 0x22, 0x32, 0x1d, 0x03, 0x0a, 0x03, 0x09, 0x00, 0x00, 0x00, 0x00, 

        0x00, 0x80, 0x40, 0x40, 0xe0, 0xe0, 0xf0, 0xd0, 0xc8, 0xc4, 0xf2, 0xd2, 0xe2, 0xda, 0xd6, 0xfe, 0x4a, 0x62, 0xde, 0xc2, 0xc2, 0xc2, 0xc2, 0xc6, 0xc4, 0x4c, 0x78, 0xe0, 0x00, 0x00, 0x00, 0x00, 
        0x03, 0x06, 0x0e, 0x03, 0x1d, 0x32, 0x22, 0x26, 0x1d, 0x03, 0x0f, 0x0d, 0x0b, 0x0d, 0x0b, 0x0d, 0x0b, 0x0f, 0x03, 0x1d, 0x32, 0x22, 0x26, 0x1d, 0x03, 0x02, 0x0b, 0x01, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x54, 0x00, 0x00, 0x00, 0x00, 
        0x03, 0x03, 0x07, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
           
        0xe0, 0x30, 0xb8, 0xe4, 0xe2, 0xe1, 0xe9, 0xfd, 0xa1, 0xf1, 0xff, 0xf3, 0xa1, 0xe9, 0xed, 0xfd, 0xe1, 0xf3, 0xbf, 0xf3, 0xa1, 0xe1, 0xa1, 0xe1, 0xa1, 0xf3, 0xfe, 0x54, 0x00, 0x00, 0x00, 0x00, 
        0x03, 0x03, 0x07, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x07, 0x0b, 0x07, 0x0b, 0x07, 0x0b, 0x06, 0x0b, 0x06, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0xe0, 0x30, 0xb8, 0xe4, 0xe2, 0xe1, 0xe9, 0xfd, 0xa1, 0xf1, 0xff, 0xf3, 0xa1, 0xe9, 0xed, 0xfd, 0xe1, 0xf3, 0xbf, 0xf3, 0xa1, 0xe1, 0xa1, 0xe1, 0xa1, 0xf3, 0xfe, 0x54, 0x00, 0x00, 0x00, 0x00, 
        0x03, 0x03, 0x07, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x07, 0x0b, 0x07, 0x0b, 0x07, 0x0b, 0x06, 0x0b, 0x06, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0x98, 0xcc, 0xa4, 0xc0, 0x90, 0xf8, 0xb0, 0xc0, 0xe0, 0xe0, 0xa0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x0d, 0x0c, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x0e, 0x09, 0x0f, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
 
        0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0x98, 0xcc, 0xa4, 0xc0, 0x90, 0xf8, 0xb0, 0xc0, 0xe0, 0xe0, 0xa0, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x07, 0x0d, 0x0c, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x0e, 0x09, 0x0f, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbe, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 

        0xfc, 0xd2, 0xe1, 0xcd, 0xfd, 0xa5, 0xa1, 0xf1, 0xfe, 0x00, 0xfe, 0xff, 0xeb, 0xd5, 0xfe, 0xeb, 0xd5, 0xfe, 0xeb, 0xd5, 0xfe, 0xeb, 0xd5, 0xfe, 0xeb, 0xd5, 0xfe, 0xbe, 0x00, 0x00, 0x00, 0x00, 
        0x0a, 0x0f, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x0f, 0x0f, 0x0e, 0x06, 0x0b, 0x06, 0x0a, 0x07, 0x0a, 0x0e, 0x0f, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 

        0xfc, 0xd2, 0xe1, 0xcd, 0xfd, 0xa5, 0xa1, 0xf1, 0xfe, 0x00, 0xfe, 0xff, 0xeb, 0xd5, 0xfe, 0xeb, 0xd5, 0xfe, 0xeb, 0xd5, 0xfe, 0xeb, 0xd5, 0xfe, 0xeb, 0xd5, 0xfe, 0xbe, 0x00, 0x00, 0x00, 0x00, 
        0x0a, 0x0f, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x0f, 0x0f, 0x0e, 0x06, 0x0b, 0x06, 0x0a, 0x07, 0x0a, 0x0e, 0x0f, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    },
    {
   
        32, 16,
        0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf4, 0xfc, 0xe4, 0xc4, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x06, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 
  
        0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xa0, 0x90, 0xd0, 0x88, 0x88, 0xa4, 0xf4, 0x84, 0xc4, 0xec, 0xd4, 0xe8, 0xd0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe4, 0xdc, 0x64, 0x44, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x06, 0x0f, 0x0f, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x0f, 0x17, 0x0f, 0x16, 0x0f, 0x17, 0x0f, 0x17, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 
  
        0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xa0, 0x90, 0xd0, 0x88, 0x88, 0xa4, 0xf4, 0x84, 0xc4, 0xec, 0xd4, 0xe8, 0xd0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe4, 0xdc, 0x64, 0x44, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x06, 0x0f, 0x0f, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x0f, 0x17, 0x0f, 0x16, 0x0f, 0x17, 0x0f, 0x17, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 

        0x80, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xd0, 0xc8, 0xe4, 0xc2, 0xc2, 0xd2, 0xfa, 0x42, 0xc2, 0xc2, 0xc6, 0xaa, 0xd4, 0xa8, 0xd0, 0xa0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0e, 0x0f, 0x03, 0x1d, 0x2e, 0x22, 0x3a, 0x1d, 0x03, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x03, 0x1d, 0x2e, 0x22, 0x3a, 0x1d, 0x03, 0x0e, 0x06, 0x00, 0x00, 0x00, 0x00, 

        0x80, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xd0, 0xc8, 0xe4, 0xc2, 0xc2, 0xd2, 0xfa, 0x42, 0xc2, 0xc2, 0xc6, 0xaa, 0xd4, 0xa8, 0xd0, 0xa0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0e, 0x0f, 0x03, 0x1d, 0x32, 0x36, 0x26, 0x1d, 0x03, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x17, 0x0f, 0x03, 0x1d, 0x32, 0x36, 0x26, 0x1d, 0x03, 0x0e, 0x06, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 

        0xc0, 0x20, 0xa0, 0xe0, 0xe0, 0xf0, 0xec, 0xe2, 0xf1, 0xe1, 0xe9, 0xfd, 0xa1, 0xd1, 0xbf, 0xde, 0xa0, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0f, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x1e, 0x1d, 0x1a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0e, 0x01, 0x1c, 0x26, 0x2a, 0x32, 0x1c, 0x01, 0x1f, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 

        0xc0, 0x20, 0xa0, 0xe0, 0xe0, 0xf0, 0xec, 0xe2, 0xf1, 0xe1, 0xe9, 0xfd, 0xa1, 0xd1, 0xbf, 0xde, 0xa0, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0x80, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0f, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x1e, 0x1d, 0x1a, 0x15, 0x0a, 0x15, 0x0a, 0x15, 0x0e, 0x01, 0x1c, 0x32, 0x2a, 0x26, 0x1c, 0x01, 0x1f, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 
    },
    {
        32, 16,
        0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 

        0x00, 0x80, 0x40, 0xc0, 0xc0, 0xc0, 0xe0, 0xd8, 0xc4, 0xe2, 0xd2, 0xe3, 0xc1, 0xc9, 0x7d, 0x41, 0xe1, 0xff, 0x55, 0x6b, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0x7e, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x02, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x1f, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x1f, 0x03, 0x19, 0x2d, 0x25, 0x35, 0x19, 0x03, 0x0e, 0x00, 0x00, 0x00, 0x00, 

        0x00, 0x80, 0x40, 0xc0, 0xc0, 0xc0, 0xe0, 0xd8, 0xc4, 0xe2, 0xd2, 0xe3, 0xc1, 0xc9, 0x7d, 0x41, 0xe1, 0xff, 0x55, 0x6b, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0xeb, 0xd5, 0x7e, 0x00, 0x00, 0x00, 0x00, 
        0x0f, 0x02, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x1f, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x17, 0x1b, 0x1f, 0x03, 0x19, 0x35, 0x25, 0x2d, 0x19, 0x03, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    },
    
    {
        32, 16,
        0x8e, 0xce, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xce, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xce, 0xe4, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xfe, 0xd0, 0x00, 0x00, 0x00, 0x00, 
        0x0d, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0c, 0x00, 0x00, 0x00, 0x00, 

        0x8e, 0x4e, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x4a, 0x6d, 0x5b, 0x7d, 0x5b, 0x7d, 0x5b, 0x6d, 0x4a, 0x64, 0x60, 0x50, 0x60, 0x50, 0x60, 0x50, 0x6e, 0xd0, 0x00, 0x00, 0x00, 0x00, 
        0x0c, 0x12, 0x21, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x00, 0x2d, 0x0c, 0x21, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 

        0x8e, 0x4e, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x4a, 0x6d, 0x5b, 0x7d, 0x5b, 0x7d, 0x5b, 0x6d, 0x4a, 0x64, 0x60, 0x50, 0x60, 0x50, 0x60, 0x50, 0x6e, 0xd0, 0x00, 0x00, 0x00, 0x00, 
        0x0c, 0x12, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x21, 0x0c, 0x2d, 0x00, 0x12, 0x0c, 0x00, 0x00, 0x00, 0x00, 

    },
    {
        32, 16,
        0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x00, 
        0x07, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0x07, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 

        0x70, 0x78, 0xd4, 0xe2, 0xc9, 0x7d, 0x41, 0xff, 0xc1, 0x51, 0xf9, 0x41, 0xff, 0x41, 0xd1, 0x79, 0xc1, 0x7f, 0xc1, 0x51, 0xf9, 0x41, 0xff, 0x41, 0xc1, 0x63, 0x7e, 0x54, 0x00, 0x00, 0x00, 0x00, 
        0x05, 0x0f, 0x1f, 0x07, 0x1b, 0x35, 0x25, 0x2d, 0x1b, 0x07, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x07, 0x1b, 0x35, 0x25, 0x2d, 0x1b, 0x07, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 
        
        0x70, 0x78, 0xd4, 0xe2, 0xc9, 0x7d, 0x41, 0xff, 0xc1, 0x51, 0xf9, 0x41, 0xff, 0x41, 0xd1, 0x79, 0xc1, 0x7f, 0xc1, 0x51, 0xf9, 0x41, 0xff, 0x41, 0xc1, 0x63, 0x7e, 0x54, 0x00, 0x00, 0x00, 0x00, 
        0x05, 0x0f, 0x1f, 0x07, 0x1b, 0x2d, 0x25, 0x35, 0x1b, 0x07, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x0f, 0x1e, 0x07, 0x1b, 0x2d, 0x25, 0x35, 0x1b, 0x07, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 
   },
   {
        32, 16,
        0x80, 0xc0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf4, 0xf2, 0xf0, 0xf0, 0xf0, 0xf9, 0xfd, 0xff, 0xb6, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x80, 0x40, 0x60, 0x50, 0xf0, 0x70, 0x48, 0xe4, 0xd2, 0xa0, 0xa0, 0xa0, 0xe9, 0xfd, 0xff, 0xb6, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x1e, 0x23, 0x2d, 0x2f, 0x31, 0x1e, 0x00, 0x0f, 0x03, 0x05, 0x0e, 0x1b, 0x11, 0x0e, 0x0f, 0x08, 0x1e, 0x2b, 0x2d, 0x2d, 0x31, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

        0x80, 0x40, 0x60, 0x50, 0xf0, 0x70, 0x48, 0xe4, 0xd2, 0xa0, 0xa0, 0xa0, 0xe9, 0xfd, 0xff, 0xb6, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x1e, 0x31, 0x2d, 0x2f, 0x23, 0x1e, 0x00, 0x0f, 0x03, 0x05, 0x0e, 0x1b, 0x11, 0x0e, 0x0f, 0x08, 0x1e, 0x39, 0x2d, 0x2d, 0x23, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   }
};

const uint8_t PROGMEM logo_close[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x8c, 0xc6, 0x63, 0x31, 0x19, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1e, 0x17, 0x27, 0x2f, 0xbf, 0xde, 0xec, 0xbf, 0xd3, 0xa0, 0xd0, 0xe0, 0xd2, 0xe1, 0xd0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xd0, 0xe8, 0xd0, 0xe0, 0xd0, 0xa0, 0xd0, 0xb3, 0x7f, 0xec, 0xde, 0xbf, 0x2f, 0x27, 0x17, 0x1e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0xb0, 0x58, 0xa8, 0xd4, 0xfe, 0x5e, 0xff, 0xf7, 0xfb, 0xff, 0xfe, 0xff, 0xd7, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xab, 0xd7, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xf7, 0x5f, 0xfe, 0xe8, 0xd4, 0xa8, 0x50, 0xb0, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xdf, 0xda, 0xb5, 0x6a, 0xd5, 0xbf, 0xff, 0x87, 0x79, 0x7f, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0x7d, 0x83, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x83, 0x7d, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0x7f, 0x79, 0x87, 0xff, 0xdf, 0xea, 0x75, 0xba, 0xdd, 0xdf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xfb, 0x7f, 0xbb, 0xf7, 0xb7, 0xee, 0xb7, 0x6e, 0xb7, 0x6e, 0xaf, 0x6e, 0xaf, 0x6e, 0xef, 0xee, 0xef, 0xef, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xef, 0xef, 0xee, 0xef, 0x6e, 0xaf, 0x6e, 0xaf, 0x6e, 0xb7, 0x6e, 0xb7, 0xee, 0xb7, 0xf7, 0xbb, 0x7f, 0xfb, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x08, 0x04, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x80, 0x40, 0x80, 0x00, 0x00, 0x03, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x8e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x1f, 0xff, 0xce, 0x0f, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0f, 0xce, 0xff, 0xfe, 0x1f, 0x0e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x8e, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x00, 0x00, 0x40, 0x20, 0x40, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM logo_open[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x8c, 0xc6, 0x63, 0x31, 0x19, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1e, 0x17, 0x27, 0x2f, 0xbf, 0xde, 0xec, 0xbf, 0xd3, 0xa0, 0xd0, 0xe0, 0xd2, 0xe1, 0xd0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xf0, 0xe8, 0xd0, 0xe8, 0xd0, 0xe0, 0xd0, 0xa0, 0xd0, 0xb3, 0x7f, 0xec, 0xde, 0xbf, 0x2f, 0x27, 0x17, 0x1e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0xb0, 0x58, 0xa8, 0xd4, 0xfe, 0x5e, 0xff, 0xf7, 0xfb, 0xff, 0xfe, 0xff, 0xd7, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xab, 0xd7, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xf7, 0x5f, 0xfe, 0xe8, 0xd4, 0xa8, 0x50, 0xb0, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xdf, 0xda, 0xb5, 0x6a, 0xd5, 0xbf, 0xff, 0x87, 0x01, 0x38, 0x6c, 0x5c, 0x7c, 0x38, 0x00, 0x00, 0x38, 0x6c, 0x5c, 0x7c, 0x38, 0x01, 0x83, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x83, 0x01, 0x38, 0x6c, 0x5c, 0x7c, 0x38, 0x00, 0x00, 0x38, 0x6c, 0x5c, 0x7c, 0x38, 0x01, 0x87, 0xff, 0xdf, 0xea, 0x75, 0xba, 0xdd, 0xdf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xfb, 0x7f, 0xbb, 0xf7, 0xb7, 0xee, 0xb7, 0x6e, 0xb7, 0x6e, 0xaf, 0x6e, 0xaf, 0x6e, 0xef, 0xee, 0xef, 0xef, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xee, 0xef, 0xef, 0xef, 0xee, 0xef, 0x6e, 0xaf, 0x6e, 0xaf, 0x6e, 0xb7, 0x6e, 0xb7, 0xee, 0xb7, 0xf7, 0xbb, 0x7f, 0xfb, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x08, 0x04, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x84, 0x48, 0x80, 0x40, 0x80, 0x00, 0x00, 0x03, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x8e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x1f, 0xff, 0xce, 0x0f, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0d, 0x0e, 0x0f, 0xce, 0xff, 0xfe, 0x1f, 0x0e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x0e, 0x0f, 0x8e, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x00, 0x00, 0x40, 0x20, 0x40, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x41, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM lotus[] = {
128, 32,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xa0, 0x80, 0xc0, 0xe0, 0xe0, 0xc0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x60, 0x60, 0xe0, 0xe0, 0xe0, 0xa0, 0x80, 0xc0, 0xe0, 0xe0, 0xc0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf0, 0x78, 0x38, 0x18, 0x88, 0xc8, 0x68, 0x3c, 0x9e, 0x4e, 0xae, 0x46, 0xa6, 0x56, 0xa6, 0x52, 0xaa, 0x52, 0xaa, 0x02, 0x02, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xa2, 0x42, 0x8a, 0x12, 0x2a, 0x54, 0xa4, 0x44, 0x88, 0x48, 0x18, 0x10, 0x30, 0x20, 0x20, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x0f, 0x8f, 0xff, 0xfd, 0xfa, 0xf5, 0xfa, 0xf5, 0xeb, 0xf7, 0xeb, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x76, 0x6e, 0xf6, 0xef, 0xd7, 0xef, 0xd6, 0xec, 0xdc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0x1c, 0xc0, 0xfc, 0xcc, 0xdc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfd, 0xfc, 0xfc, 0xf8, 0xf9, 0xf3, 0xf7, 0xf7, 0xf6, 0xf9, 0xc9, 0x1f, 0xfb, 0xf7, 0xfb, 0xf6, 0xea, 0xf6, 0xee, 0xf6, 0xee, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3d, 0xdd, 0x9d, 0x5d, 0x9d, 0x5d, 0x9d, 0x5d, 0x9d, 0xfd, 0x0f, 0x01, 0xc0, 0x70, 0x18, 0x0c, 0x84, 0xc6, 0x62, 0xfe, 0x62, 0xc6, 0x84, 0x0c, 0x18, 0x70, 0xc0, 0x03, 0x3e, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xff, 0xf8, 0x82, 0x3d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x3e, 0x80, 0xff, 0xfe, 0x1d, 0x0e, 0xc3, 0x71, 0x18, 0x0c, 0x84, 0xc6, 0x62, 0xfe, 0x62, 0xc6, 0x84, 0x0c, 0x18, 0x71, 0xc2, 0x06, 0x1d, 0xfd, 0xfd, 0xbd, 0xbd, 0xbd, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0xbe, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x01, 0x02, 0x01, 0x00, 0x00, 0x07, 0x1d, 0x31, 0x61, 0x43, 0xc7, 0x8d, 0xfe, 0x8d, 0xc7, 0x43, 0x61, 0x31, 0x1d, 0x07, 0x00, 0x00, 0x07, 0x0f, 0x0f, 0x0f, 0x0e, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0a, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0d, 0x0f, 0x03, 0x00, 0x00, 0x07, 0x1d, 0x31, 0x61, 0x43, 0xc7, 0x8d, 0xfe, 0x8d, 0xc7, 0x43, 0x61, 0x31, 0x1d, 0x07, 0x00, 0x00, 0x01, 0x0f, 0x08, 0x08, 0x04, 0x0b, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x02, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x60, 0x60, 0xe0, 0xe0, 0xe0, 0xa0, 0x80, 0xc0, 0xe0, 0xe0, 0xc0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf0, 0x78, 0x38, 0x18, 0x88, 0xc8, 0x68, 0x3c, 0x9e, 0x4e, 0xae, 0x46, 0xa6, 0x56, 0xa6, 0x52, 0xaa, 0x52, 0xaa, 0x02, 0x02, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xa2, 0x42, 0x8a, 0x12, 0x2a, 0x54, 0xa4, 0x44, 0x88, 0x48, 0x18, 0x10, 0x30, 0x20, 0x20, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x0f, 0x8f, 0xff, 0xfd, 0xfa, 0xf5, 0xfa, 0xf5, 0xeb, 0xf7, 0xeb, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x76, 0x6e, 0xf6, 0xef, 0xd7, 0xef, 0xd6, 0xec, 0xdc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0x1c, 0xc0, 0xfc, 0xcc, 0xdc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfd, 0xfc, 0xfc, 0xf8, 0xf9, 0xf3, 0xf7, 0xf7, 0xf6, 0xf9, 0xc9, 0x1f, 0xfb, 0xf7, 0xfb, 0xf6, 0xea, 0xf6, 0xee, 0xf6, 0xee, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3d, 0xdd, 0x9d, 0x5d, 0x9d, 0x5d, 0x9d, 0x5d, 0x9d, 0xfd, 0x0f, 0x01, 0xe0, 0x50, 0x58, 0x8c, 0xc6, 0xc2, 0xa2, 0xe2, 0x7e, 0xe6, 0x82, 0x0c, 0x18, 0xf0, 0xe0, 0x03, 0x3e, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xff, 0xf8, 0x82, 0x3d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x3e, 0x80, 0xff, 0xfe, 0x1d, 0x0e, 0xe3, 0x51, 0x58, 0x8c, 0xc6, 0xc2, 0xa2, 0xe2, 0x7e, 0xe6, 0x82, 0x0c, 0x18, 0xf1, 0xe2, 0x06, 0x1d, 0xfd, 0xfd, 0xbd, 0xbd, 0xbd, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0xbe, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x01, 0x02, 0x01, 0x00, 0x00, 0x07, 0x1c, 0x30, 0x60, 0x61, 0xc7, 0xbc, 0xce, 0xc5, 0xc7, 0x63, 0x23, 0x32, 0x0a, 0x07, 0x00, 0x00, 0x07, 0x0f, 0x0f, 0x0f, 0x0e, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0a, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0d, 0x0f, 0x03, 0x00, 0x00, 0x07, 0x1c, 0x30, 0x60, 0x61, 0xc7, 0xbc, 0xce, 0xc5, 0xc7, 0x63, 0x23, 0x32, 0x0a, 0x07, 0x00, 0x00, 0x01, 0x0f, 0x08, 0x08, 0x04, 0x0b, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x02, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x60, 0x60, 0xe0, 0xe0, 0xe0, 0xa0, 0x80, 0xc0, 0xe0, 0xe0, 0xc0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf0, 0x78, 0x38, 0x18, 0x88, 0xc8, 0x68, 0x3c, 0x9e, 0x4e, 0xae, 0x46, 0xa6, 0x56, 0xa6, 0x52, 0xaa, 0x52, 0xaa, 0x02, 0x02, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xa2, 0x42, 0x8a, 0x12, 0x2a, 0x54, 0xa4, 0x44, 0x88, 0x48, 0x18, 0x10, 0x30, 0x20, 0x20, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x0f, 0x8f, 0xff, 0xfd, 0xfa, 0xf5, 0xfa, 0xf5, 0xeb, 0xf7, 0xeb, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x76, 0x6e, 0xf6, 0xef, 0xd7, 0xef, 0xd6, 0xec, 0xdc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0x1c, 0xc0, 0xfc, 0xcc, 0xdc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfd, 0xfc, 0xfc, 0xf8, 0xf9, 0xf3, 0xf7, 0xf7, 0xf6, 0xf9, 0xc9, 0x1f, 0xfb, 0xf7, 0xfb, 0xf6, 0xea, 0xf6, 0xee, 0xf6, 0xee, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3d, 0xdd, 0x9d, 0x5d, 0x9d, 0x5d, 0x9d, 0x5d, 0x9d, 0xfd, 0x0f, 0x01, 0xc0, 0xf0, 0x08, 0x1c, 0x36, 0xe6, 0xe2, 0xa2, 0xe2, 0xe2, 0xe6, 0x14, 0x0c, 0x38, 0xe0, 0x03, 0x3e, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xff, 0xf8, 0x82, 0x3d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x3e, 0x80, 0xff, 0xfe, 0x1d, 0x0e, 0xc3, 0xf1, 0x08, 0x1c, 0x36, 0xe6, 0xe2, 0xa2, 0xe2, 0xe2, 0xe6, 0x14, 0x0c, 0x39, 0xe2, 0x06, 0x1d, 0xfd, 0xfd, 0xbd, 0xbd, 0xbd, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0x3d, 0xbd, 0xbe, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x01, 0x02, 0x01, 0x00, 0x00, 0x07, 0x1f, 0x30, 0x70, 0x4c, 0xcf, 0xc6, 0xc5, 0xc7, 0xc6, 0x4f, 0x58, 0x30, 0x1c, 0x0f, 0x00, 0x00, 0x07, 0x0f, 0x0f, 0x0f, 0x0e, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0a, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0d, 0x0f, 0x03, 0x00, 0x00, 0x07, 0x1f, 0x30, 0x70, 0x4c, 0xcf, 0xc6, 0xc5, 0xc7, 0xc6, 0x4f, 0x58, 0x30, 0x1c, 0x0f, 0x00, 0x00, 0x01, 0x0f, 0x08, 0x08, 0x04, 0x0b, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x02, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 

//lotus crashed
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x60, 0x60, 0xe0, 0xe0, 0xe0, 0xa0, 0x80, 0xc0, 0xe0, 0xe0, 0xc0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf0, 0x78, 0x38, 0x18, 0x88, 0xc8, 0x68, 0x3c, 0x9e, 0x4e, 0xae, 0x46, 0xa6, 0x56, 0xa6, 0x52, 0xaa, 0x52, 0xaa, 0x02, 0x02, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xaa, 0x52, 0xa0, 0x4e, 0x88, 0x18, 0x38, 0x58, 0xb4, 0x64, 0xa0, 0x40, 0x80, 0x80, 0x60, 0x20, 0x20, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x20, 0xc0, 0xe0, 0xd0, 0xe0, 0xd0, 0xe0, 0x70, 0x70, 0xf0, 0xf0, 0xf8, 0xf0, 0x78, 0x38, 0x18, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x0f, 0x8f, 0xff, 0xfd, 0xfa, 0xf5, 0xfa, 0xf5, 0xeb, 0xf7, 0xeb, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x77, 0x6b, 0x76, 0x6e, 0xf6, 0xef, 0xd7, 0xef, 0xd6, 0xec, 0xdc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0xfc, 0xfd, 0x1c, 0x40, 0x0c, 0xcc, 0xdc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x7c, 0xfd, 0xfc, 0xfc, 0xf8, 0x39, 0xf3, 0xb7, 0x37, 0x76, 0x79, 0x49, 0x5f, 0x7b, 0x77, 0x7b, 0xd6, 0xca, 0xc6, 0xee, 0xe0, 0x20, 0xe8, 0xe0, 0x00, 0x60, 0x9e, 0xef, 0xf4, 0xeb, 0xf7, 0xeb, 0x77, 0x6b, 0x74, 0x6a, 0x77, 0x6b, 0x77, 0x6b, 0x76, 0x6e, 0xf6, 0xef, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3d, 0xdd, 0x9d, 0x5d, 0x9d, 0x5d, 0x9d, 0x5d, 0x9d, 0xfd, 0x0f, 0x01, 0xc0, 0x70, 0x18, 0x0c, 0x84, 0xc6, 0x62, 0xfe, 0x62, 0xc6, 0x84, 0x0c, 0x18, 0x70, 0xc0, 0x03, 0x3e, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xff, 0x88, 0x80, 0x05, 0x3e, 0x3d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x7d, 0x7e, 0x5d, 0x0e, 0x2d, 0x1e, 0x00, 0x01, 0x02, 0xc2, 0x70, 0x18, 0x0c, 0x84, 0xc6, 0x62, 0xfe, 0x62, 0xc6, 0x84, 0x0c, 0x18, 0x71, 0xc2, 0x06, 0xfc, 0xff, 0x1b, 0x00, 0xb8, 0xfc, 0x0f, 0x07, 0xc7, 0x71, 0x18, 0x0c, 0x84, 0xc6, 0x62, 0xfe, 0x62, 0xc6, 0x84, 0x0c, 0x18, 0x70, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x01, 0x02, 0x01, 0x00, 0x00, 0x07, 0x1d, 0x31, 0x61, 0x43, 0xc7, 0x8d, 0xfe, 0x8d, 0xc7, 0x43, 0x61, 0x31, 0x1d, 0x07, 0x00, 0x00, 0x07, 0x0f, 0x0f, 0x0f, 0x0e, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x0e, 0x0e, 0x0e, 0x0e, 0x0a, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0f, 0x0b, 0x0e, 0x0a, 0x01, 0x00, 0x00, 0x07, 0x1d, 0x31, 0x61, 0x43, 0xc7, 0x8d, 0xfe, 0x8d, 0xc7, 0x43, 0x61, 0x31, 0x1d, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x07, 0x1d, 0x31, 0x61, 0x43, 0xc7, 0x8d, 0xfe, 0x8d, 0xc7, 0x43, 0x61, 0x31, 0x1d, 0x07, 

};

void initialize_cars_postions(){

    left_cars_x[0] = random(128, 500);
    left_cars_x[1] = random(128, 500);
    left_cars_x[2] = random(128, 500);

    left_cars_y[0] = tracks[0];
    left_cars_y[1] = tracks[1];
    left_cars_y[2] = tracks[2];

    left_cars_speed[0] = random(min_speed_left_cars, max_speed_left_cars);
    left_cars_speed[1] = random(min_speed_left_cars, max_speed_left_cars);
    left_cars_speed[2] = random(min_speed_left_cars, max_speed_left_cars);

    left_cars_selected_car[0] = random(0, no_of_type_cars);
    left_cars_selected_car[1] = random(0, no_of_type_cars);
    left_cars_selected_car[2] = random(0, no_of_type_cars);

    right_cars_x[0] = random(128, 200);
    right_cars_y[0] = tracks[3];
    right_cars_speed[0] = 1;
    right_cars_selected_car[0] = random(0, no_of_type_cars);

}

byte last_selected_car_random = 0;
void refresh_cars() {
    for (byte i = 0; i < no_of_left_cars; i++) {
        Sprites::drawExternalMask(left_cars_x[i], left_cars_y[i], cars_left[left_cars_selected_car[i]], cars_left[left_cars_selected_car[i]], car_frame, 0);
        left_cars_x[i] = left_cars_x[i] - left_cars_speed[i] - my_speed;

        if (left_cars_x[i] < -28) {
            left_cars_x[i] = random(128, 500);
            left_cars_speed[i] = random(min_speed_left_cars, max_speed_left_cars);
            last_selected_car_random = random(0, no_of_type_cars);
            left_cars_selected_car[i] = last_selected_car_random;
        }
    }
    

    if ((right_cars_x[0] < -250) || (right_cars_x[0] > 200)) {
        right_cars_x[0] = 128;
        right_cars_speed[0] = 1;
        right_cars_selected_car[0] = last_selected_car_random;
    }
  
    Sprites::drawExternalMask(right_cars_x[0], right_cars_y[0], cars_right[right_cars_selected_car[0]], cars_right[right_cars_selected_car[0]], car_frame, 0);
    right_cars_x[0] = right_cars_x[0] + right_cars_speed[0] - my_speed;

    Sprites::drawExternalMask(playerx, playery, cars_right[my_car], cars_right[my_car], user_car_frame, 0);
}


void anim_crash(int x=63, int y=32){
   // beep.noTone(); 
    int i=0;
 
    do{
        arduboy.pollButtons();
        
        if (arduboy.everyXFrames(1)) {
             
            arduboy.drawCircle(x,y,0+(2*i));
            arduboy.drawCircle(x,y,0+(3*i));
            arduboy.drawCircle(x,y,0+(5*i));
            arduboy.fillCircle(x,y,0+i);
            arduboy.drawCircle(x,y,-3+i, 0); 
          
            if (i>6) {arduboy.fillCircle(x,y,-6+i,BLACK);}
       
            if (i<=15) {i = i + 2;
            } else if ((i>15)&&(i<=50)){
                i= i + 6; 
            }else if (i>50) {
                i= i + 10; 
            }
        
            arduboy.display();  
        }
       
    }while(i < 120);

}

void check_cars_collision() {
    
    //hit car from the left side
    for (byte i = 0; i < no_of_left_cars; i++) {
        if (arduboy.collide(Rect(playerx + 10, playery + 2, 28 - 25, 14 - 4), Rect(left_cars_x[i] + 5, left_cars_y[i] + 2, 28 - 10, 14 - 4)))
        {
            sound.tone(400, 200);
            anim_crash(playerx+28, playery+7);
            
            score = score - 1000;
            car_crashes=car_crashes+1;
            arduboy.fillScreen();
            arduboy.display();
            my_car_track = 3;
            my_speed = 1;
            playery = tracks[my_car_track];
            
            if  ((right_cars_x[0] > -28) && (right_cars_x[0]) <=30 ){
                playerx = 65;
            } else if ((right_cars_x[0] > 30) && (right_cars_x[0]) <=128 ){
                playerx = 0;
            } else {
                playerx=0;
            }
            
            arduboy.clear();           
            
            if (game_type == 1) {   //game_type == 1 => unlimited time mode
                lives = lives-1;    
            }

        }
    }

    //hit car from right side
    if (arduboy.collide(Rect(playerx + 10, playery + 2, 28 - 25, 14 - 4), Rect(right_cars_x[0] + 5, right_cars_y[0] + 2, 28 - 10, 14 - 4))) {
        score = score - 500;
        car_crashes=car_crashes+1;
        sound.tone(400, 200);
        anim_crash(playerx+28, playery+7);

        arduboy.fillScreen();
        arduboy.display();
        my_car_track = 3;
        my_speed = 1;

        if  ((right_cars_x[0] > -28) && (right_cars_x[0]) <=30 ){
            playerx = 65;
        } else if ((right_cars_x[0] > 30) && (right_cars_x[0]) <=128 ){
            playerx = 0;
        } else {
            playerx=0;
        }
        
        playery = tracks[my_car_track];
        arduboy.clear();
        
        if (game_type == 1) {   //game_type == 1 => unlimited time mode
            lives = lives-1;    
        }
  }

}

void audio_settings(){
    
    int selected_sound_settings = 0;
    byte car_selected=0;
    byte loop_state=0;
    do{
        arduboy.pollButtons();
        arduboy.clear();
        
        do{
            delay(1);
        }while (!(arduboy.nextFrame()));
        
        if (arduboy.everyXFrames(6)) {
            update_car_frames();
        }
        if (arduboy.everyXFrames(30)) {
            car_selected=random(0, no_of_type_cars);
        }
        
        Sprites::drawExternalMask(0, 0, cars_right[car_selected], cars_right[car_selected], car_frame, 0);

        arduboy.setTextSize(2);
        arduboy.setCursor(69,0);
        arduboy.print("smBIT");
                
        arduboy.drawLine(0,17,128,17, WHITE);
        arduboy.drawLine(0,19,128,19, WHITE);
        arduboy.drawLine(0,37,128,37, WHITE);
        arduboy.drawLine(0,39,128,39, WHITE);

        arduboy.setTextSize(2);
        arduboy.setCursor(0,21);
        arduboy.print("StreetRacer");
        arduboy.setTextSize(1);

    if (selected_sound_settings == 0) {
      arduboy.setCursor(18, 47);
      arduboy.print("<< Sound ON  >>");
      audio.on();
    } else if (selected_sound_settings == 1) {
      arduboy.setCursor(18, 47);
      arduboy.print("<< Sound OFF >>");
      audio.off();
    }


    if (arduboy.justPressed(RIGHT_BUTTON)) {
      selected_sound_settings = selected_sound_settings + 1;
      if (selected_sound_settings > 1) {
        selected_sound_settings = 0;
      }
    }
    if (arduboy.justPressed(LEFT_BUTTON)) {
      selected_sound_settings = selected_sound_settings - 1;
      if (selected_sound_settings < 0) {
        selected_sound_settings = 1;
      }

    }

    if (arduboy.justPressed(A_BUTTON)) {
      game_stage = GAME_TITLE;
      loop_state=1;
    }

    arduboy.setCursor(15, 57);
    arduboy.print("PRESS A TO START");
    arduboy.display();

    }while(loop_state == 0);
    
}

void setup() {
    arduboy.begin();
    arduboy.setFrameRate(30);
    arduboy.setTextColor(WHITE);
    arduboy.setTextBackground(WHITE);
    
    audio.begin();
    
    anim_crash();
    audio_settings();
    anim_crash();
    
    start_animation();
anim_crash();

}

void start_animation(){
   
    demo_car_1(2);
    demo_car_2();
    game_stage = GAME_TITLE;
    
}

void anim_crash_car(byte speed=2){
    

    int demo_car_x=-128;
    byte frame=1;
    byte end_loop=0;
    do{

        do{
            delay(1);
        }while (!(arduboy.nextFrame()));
    
        arduboy.pollButtons();
                       
        arduboy.clear();
        
        if (arduboy.everyXFrames(3)) {
            frame=frame+1;
            if(frame>3){frame=1;}
        }
               
        Sprites::drawExternalMask(demo_car_x,32, lotus, lotus, frame, 0);
        Sprites::drawExternalMask(100,32, lotus, lotus, frame, 0);
        
        if (arduboy.everyXFrames(1)) {
            demo_car_x = demo_car_x + speed;
        }
        if (demo_car_x > -15){
            end_loop=1;}
    
        arduboy.display();
     
        if (arduboy.justPressed(A_BUTTON)) {
            end_loop=1;
            
        } 
    
    }while(end_loop == 0);
    arduboy.clear();
    Sprites::drawOverwrite(0,32,lotus,4);
    arduboy.display();
    sound.tone(900, 200); 
    delay(1000);
}

void demo_car_2(){

    arduboy.clear();
    Sprites::drawOverwrite(0,0,logo_close,0);
    arduboy.display();  
    delay(500);

    sound.tone(600, 100); 
    arduboy.clear();
    Sprites::drawOverwrite(0,0,logo_open,0);
    arduboy.display();  
    delay(500); 
}

void demo_car_1(byte speed=2){
    
    
    int demo_car_x=-128;
    byte frame=1;
    byte end_loop=0;
    do{

        do{
            delay(1);
        }while (!(arduboy.nextFrame()));
    
        arduboy.pollButtons();
                       
        arduboy.clear();
        
        if (arduboy.everyXFrames(3)) {
            frame=frame+1;
            if(frame>3){frame=1;}
        }

               
        Sprites::drawExternalMask(demo_car_x,32, lotus, lotus, frame, 0);
        
        if (arduboy.everyXFrames(1)) {
            demo_car_x = demo_car_x + speed;
        }
        if (demo_car_x > 128){
            demo_car_x = -128;
            end_loop=1;}

        arduboy.display();
     
        if (arduboy.justPressed(A_BUTTON)) {
            end_loop=1;
            
        } 
          
    }while(end_loop == 0);

}

void update_car_frames(){
    
    
    car_frame=car_frame+1;
    if(car_frame>2){car_frame=1;}
    
    
    if (my_speed != 0) {
      if (user_car_frame == 2) {
        user_car_frame = 1;
      } else {
        user_car_frame = 2;
      }
    } else {
      user_car_frame = 3;
    }

}

void title() {

    int first_car_position_x = 128;
    int next_car_position_x = first_car_position_x;

    int j = -(car_width + 2);
    int k = 128;
    
    do{

        do{
            delay(1);
        }while (!(arduboy.nextFrame()));
    
        arduboy.pollButtons();
                       
        arduboy.clear();
        
        if (arduboy.everyXFrames(1)) {
            update_car_frames();
        }

        if(j <= (no_of_type_cars * (car_width + 2) + (no_of_type_cars * (car_width + 2) - 128))){
            j++;
               
            for (int i = 0; i < no_of_type_cars; i++) {
                Sprites::drawExternalMask((-i * (car_width + 2)) + j, tracks[1], cars_right[i], cars_right[i], car_frame, 0);
            }

        } else {
            j = -(car_width + 2);
        }
        
        if(k > -no_of_type_cars * (car_width + 2)){
            k--;
            for (int i = 0; i < no_of_type_cars; i++) {
                Sprites::drawExternalMask((i * (car_width + 2)) + k, tracks[2], cars_left[i], cars_left[i], car_frame, 0);
            }
        }else{
            k=128;
        }
    
        arduboy.setCursor(10, tracks[0]);
        arduboy.print("---STREET RACER---");
        arduboy.setCursor(15, tracks[3] + 7);
        arduboy.print("PRESS A TO START");
        arduboy.display();  
          
          
    }while(!arduboy.justPressed(A_BUTTON));

    game_stage = GAME_SELECT_GAME_MODE;

}

void select_car() {

    byte last_selected_car = my_car;
    byte loop_state = 0;
    byte i;
   
    arduboy.clear();
    Sprites::drawExternalMask(50, tracks[1], cars_right[my_car], cars_right[my_car], 3, 0);
    arduboy.display();

    do {  
        arduboy.pollButtons();
        
        
        if (last_selected_car != my_car) {
            i=0;
            while(i<=78){
                arduboy.clear();

                if ((arduboy.nextFrame())){
                    update_car_frames();
                    Sprites::drawExternalMask(-28 + i, tracks[1], cars_right[my_car], cars_right[my_car], car_frame, 0);
                    Sprites::drawExternalMask(50 + i, tracks[1], cars_right[last_selected_car], cars_right[last_selected_car], car_frame, 0);
                    arduboy.display();
                    i=i+4;
                }   
            }
            arduboy.clear();
            arduboy.setCursor(18, tracks[0]);
            arduboy.setTextSize(1);
            arduboy.print("<< SELECT CAR >>");
            Sprites::drawExternalMask(50, tracks[1], cars_right[my_car], cars_right[my_car], 3, 0);
            arduboy.display();
            last_selected_car = my_car;
        }
        
        if (arduboy.justPressed(LEFT_BUTTON)) {
            if (my_car > 0) {
                my_car = my_car - 1;
            } else {
                my_car = (no_of_type_cars - 1);
            };
        }
        
        if (arduboy.justPressed(RIGHT_BUTTON)) {
            if (my_car < (no_of_type_cars - 1)) {
                my_car = my_car + 1;
            } else {
                my_car = 0;
            };
        }
            
        //cofirm selected car - play animation     
        if (arduboy.justPressed(A_BUTTON)) {            
            i=50;
            while(i<156){
                arduboy.clear();
                       
                if ((arduboy.nextFrame())){
                    update_car_frames();
                     
                    Sprites::drawExternalMask(i, tracks[1], cars_right[my_car], cars_right[my_car], car_frame, 0);
                    arduboy.display();
                    i=i+4;
                }
                 
            }
            game_stage = GAME_COUNT_SCREEN;
            loop_state=1;
     
        }

        if (arduboy.justPressed(B_BUTTON)) {
          game_stage = GAME_SELECT_GAME_MODE;
          loop_state=1;
        }

        arduboy.setCursor(18, tracks[0]);
        arduboy.setTextSize(1);
        arduboy.print("<< SELECT CAR >>");
        arduboy.setCursor(15, tracks[2] + 7);
        arduboy.print("PRESS A TO START");
        arduboy.setCursor(18, tracks[3] + 7);
        arduboy.print("PRESS B TO BACK");
        arduboy.display();
    
    }while(loop_state == 0);
}

void game_over() {
      
    if ((time_game < 0) || (lives < 1)) {

        if (game_type == 0){ demo_car_1(10); show_flag();}
        if (game_type == 1){ demo_car_1(10); anim_crash_car(10);}  
        
        arduboy.clear();
        arduboy.setCursor(36, 0);
        arduboy.print("GAME OVER");
        arduboy.setCursor(12, 12);
        arduboy.print("SCORE: ");
        arduboy.setCursor(54, 12);
        arduboy.print(score);
        
        arduboy.setCursor(12, 22);    
        arduboy.print("HI SCORE:");
        arduboy.setCursor(66, 22);
        arduboy.print(hi_score);
        
               
         if (hi_score == 0) {
            hi_score =  score;
            arduboy.setCursor(30, 42);    
            arduboy.print("FIRST RACE!");
         } else {
            if (score > hi_score) {
                hi_score =  score;
                arduboy.setCursor(39, 42);    
                arduboy.print("YOU WIN!");
            }
            if (score < hi_score) {
                arduboy.setCursor(36, 42);    
                arduboy.print("YOU LOSE!");
            }
        }   
       

        if (game_type == 0){
            arduboy.setCursor(12, 32);
            arduboy.print("CAR CRASHES:");
            arduboy.setCursor(90, 32);
            arduboy.print(car_crashes); 
        }
          
        if (game_type == 1){
            arduboy.setCursor(12, 32);    
            arduboy.print("TIME: ");
            arduboy.setCursor(48, 32);
            arduboy.print(time_game);
        }  
        
        arduboy.setCursor(15, tracks[3] + 7);
        arduboy.print("PRESS A TO START");
        arduboy.display();

        game_stage = GAME_SELECT_GAME_MODE;
        
        do{
            arduboy.pollButtons();
            delay(1);
        }while(!arduboy.justPressed(A_BUTTON));
    }
    
}

void select_game_mode() {
   // beep.noTone(); 
    

    int selected_difficulty_level = 0;
    String difficulty_level[3] = {"EASY", "MEDIUM", "HARD"};
    byte loop_state=0;
    lives = 3;
    do{
        arduboy.pollButtons();
        arduboy.clear();
        arduboy.setCursor(12, 0);
        arduboy.print("*SELECT RACE <L/R>");
    
        if (selected_game_mode == 0) {
            arduboy.setCursor(21, 10);
            arduboy.print("30 SECOND RACE");
            game_type = 0;  //set to time mode.
            time_game = 30;
        } else if (selected_game_mode == 1) {
            arduboy.setCursor(21, 10);
            arduboy.print("60 SECOND RACE");
            game_type = 0;  //set to time mode.
            time_game = 60;
        } else if (selected_game_mode == 2) {
            arduboy.setCursor(18, 10);
            arduboy.print("180 SECOND RACE");
            game_type = 0;  //set to time mode.
            time_game = 180;
        } else if (selected_game_mode == 3) {
            arduboy.setCursor(9, 10);
            arduboy.print("NO TIME LIMIT RACE");
            game_type = 1;  //set to time mode.
            time_game = 0;
        }


        if (arduboy.justPressed(RIGHT_BUTTON)) {
                selected_game_mode = selected_game_mode + 1;
            if (selected_game_mode > 3) {
                selected_game_mode = 0;
            }
        }   
        if (arduboy.justPressed(LEFT_BUTTON)) {
            selected_game_mode = selected_game_mode - 1;
            if (selected_game_mode < 0) {
                selected_game_mode = 3;
            }
        }


        arduboy.setCursor(12, 25);
        arduboy.print("*SELECT LEVEL <U/D>");

        if (selected_level <= 10){                                      //EASY
            selected_difficulty_level = 0;
            min_speed_left_cars = 1;
            max_speed_left_cars = 2;
        }else if((selected_level > 10) && (selected_level <= 21)){      //MEDIUM
            selected_difficulty_level = 1;
            min_speed_left_cars = 1;
            max_speed_left_cars = 4;
        }else if(selected_level > 21){                                  //HARD
            selected_difficulty_level = 2;
            min_speed_left_cars = 2;
            max_speed_left_cars = 5;
        }

        arduboy.setCursor(21, 35);

        if ((selected_level == 10) || (selected_level == 21) || (selected_level == 32)){
            arduboy.print("RANDOM");
        }else{
            arduboy.print("LEVEL:");
            arduboy.setCursor(60, 35);
            arduboy.print(selected_level-(selected_difficulty_level*10)-selected_difficulty_level);
        }
    
        arduboy.setCursor(75, 35);
        arduboy.print(difficulty_level[selected_difficulty_level]);
      
        if (arduboy.justPressed(UP_BUTTON)) {
            selected_level = selected_level + 1;
            if (selected_level > number_of_levels-1) {
                selected_level = 0;
            }
        }
        if (arduboy.justPressed(DOWN_BUTTON)) {
            selected_level = selected_level - 1;
            if (selected_level < 0) {
                selected_level = number_of_levels-1;
            }
        }
    
        if (arduboy.justPressed(A_BUTTON)) {
            game_stage = GAME_SELECT_CAR;
            loop_state=1;
        }

        if (arduboy.justPressed(B_BUTTON)) {
            game_stage = GAME_TITLE;
            loop_state=1;
        }   

        arduboy.setCursor(15, 55);
        arduboy.print("PRESS A TO START");
        arduboy.display();

    }while(loop_state == 0);
    
    
    //reset hi_score when game mode or level is changed.
    if (last_selected_game_mode !=  selected_game_mode){
        last_selected_game_mode = selected_game_mode;
        hi_score = 0;
    }
    
    if (last_selected_level !=  selected_level){
        last_selected_level = selected_level;
        hi_score = 0;
    }
    
    if ((selected_level == 10) || (selected_level == 21) || (selected_level == 32)){
        randomSeed(millis());
    }else{
        randomSeed(levels_seeds[selected_level]);
    }

    initialize_cars_postions();
    initialize_user_car();
    
}

void initialize_user_car(){
    score = 0;
    car_crashes=0;
    
    my_car_track = 3;
    my_speed = 1;
    max_speed = 4;
    playery = tracks[my_car_track];
    playerx = 0;
    
}

void show_flag(){
        arduboy.clear();

    for(int j=0;j<=64;j=j+8){
        for(int i=0;i<=176;i=i+16){
            arduboy.fillRect(i-j,j,8,8,WHITE);
        }   
        arduboy.display(); 
        delay(20); 
    }
    delay(50);
    for(int j=0;j<=64;j=j+8){
        for(int i=0;i<=176;i=i+16){
            arduboy.fillRect(i-j,j,8,8,BLACK);
        }   
        arduboy.display(); 
        delay(20); 
    }
    arduboy.clear();
    arduboy.display();
}

void count_screen() {

    sound.tone(400, 200);
    arduboy.clear();
    arduboy.setTextSize(2);
    arduboy.setCursor(35, 0);
    arduboy.print("READY");
    arduboy.display();

    
    delay(500);
    sound.tone(400, 200);
    arduboy.setCursor(28, 21);
    arduboy.print("STEADY");
    arduboy.display();
    
    delay(500);
    
    sound.tone(400, 200);
    arduboy.setTextSize(3);
    arduboy.setCursor(40, 42);
    arduboy.print("GO!");
    arduboy.display();
    delay(250);
    sound.tone(500, 200);
    game_stage = GAME_TIME_MODE;
    
    show_flag();
}

void loop() {
    
    if (game_stage == 0) {
        title();
    } else if (game_stage == GAME_SELECT_GAME_MODE) {
        select_game_mode();
    } else if (game_stage == GAME_SELECT_CAR) {
        select_car();
    } else if (game_stage == GAME_COUNT_SCREEN) {
        count_screen();
    } else if (game_stage == GAME_TIME_MODE) {
        
        
        if (!(arduboy.nextFrame())){
            return;
        }
        update_car_frames();
  
        if (game_type == 0){
            if (arduboy.everyXFrames(frameRate)) {
                time_game = time_game - 1;
            }
        } else if (game_type == 1) {            //unlimited time game mode - count game time
            if (arduboy.everyXFrames(frameRate)) {
                time_game = time_game + 1;
            }
        }
        
        game_over();
    
        arduboy.clear();
        arduboy.pollButtons();
        
    // samochod na tor do gory
    if (playery > tracks[my_car_track]) {
      playery = playery - (my_speed * 2);
      if (playery - tracks[my_car_track] < my_speed) {
        playery = tracks[my_car_track];
      }
    }
    // samochod na tor do dolu
    if (playery < tracks[my_car_track]) {
      playery = playery + (my_speed * 2);
      if (tracks[my_car_track] - playery < my_speed) {
        playery = tracks[my_car_track];
      }
    }

    if (arduboy.pressed(LEFT_BUTTON)) {
      playerx = playerx - my_speed;
      if (playerx < 0) {
        playerx = 0;
      }
    }

    if (arduboy.pressed(RIGHT_BUTTON)) {

      playerx = playerx + my_speed;
      if (playerx > 100) {
        playerx = 100;
      }

    }
    if ((arduboy.justPressed(UP_BUTTON)) && (my_speed > 0)) {

      if (my_car_track > 0) {
        my_car_track = my_car_track - 1;
      }
    }
    if ((arduboy.justPressed(DOWN_BUTTON)) && (my_speed > 0)){
      if (my_car_track < 3) {
        my_car_track = my_car_track + 1;
      }
    }

    if (arduboy.justPressed(A_BUTTON)) {
      if (my_speed <= max_speed) {
        my_speed = my_speed + 1;
      }
    }

    if (arduboy.justPressed(B_BUTTON)) {
      if (my_speed > 0) {
        my_speed = my_speed - 1;
      }
    }

    if ((arduboy.pressed(A_BUTTON)) &&  (arduboy.pressed(B_BUTTON))){
      game_stage = GAME_SELECT_GAME_MODE;
    }




    road_speed = road_speed + my_speed;
    if (road_speed > 20) {
      road_speed = 0;
    }
    
    if (my_speed == 0){
    }else if((my_speed==1) && (arduboy.everyXFrames(15))){
        sound.tone(200, 10);
    }else if((my_speed==2) && (arduboy.everyXFrames(12))){
        sound.tone(200, 10);
    }else if((my_speed==3) && (arduboy.everyXFrames(10))){
        sound.tone(200, 10);
    }else if((my_speed==4) && (arduboy.everyXFrames(5))){
        sound.tone(200, 10);
    }else if((my_speed==5) && (arduboy.everyXFrames(2))){
        sound.tone(400, 10);
    }




    for (byte x = 0; x < 148; x = x + 21) {
      arduboy.drawLine(x - road_speed, 0, x + 10 - road_speed, 0);
      arduboy.drawLine(x + 5 - road_speed, 16, x + 5 + 10 - road_speed, 16);
      arduboy.drawLine(x - road_speed, 32, x + 10 - road_speed, 32);
      arduboy.drawLine(x - road_speed, 63, x + 10 - road_speed, 63);
    }
    arduboy.drawLine(0, 47, 127, 47);


    //SCORE COUNT
    if (my_speed != 0) {
        if ((my_car_track == 0)) {
            score = score + (my_speed*2) + 3;
        } else if (my_car_track == 1) {
            score = score + my_speed + 1;
        } else if (my_car_track == 2) {
            score = score + my_speed;
        } else if (my_car_track == 3) {
            if (my_speed != 1) {
                score = score;
            } else if (my_speed == 1) {
                score = score - 1;
            }
        }
    } else {
        score = score - 1;
    }


    refresh_cars();
    check_cars_collision();


    arduboy.setCursor(0, 0);
    arduboy.setTextSize(1);
    arduboy.print(score);
    arduboy.setCursor(110, 0);
    arduboy.setTextSize(1);
    arduboy.print(time_game);
    
 
    if (game_type == 1) {       // only for unlimited time game mode - show the lives on screen
        arduboy.setTextRawMode(true);
        for(int i=0; i<lives; i++){
            arduboy.setCursor(56+(i*7),0);
            arduboy.print("\x03");
        }    
        arduboy.setTextRawMode(false);
    }
    
    arduboy.display();
  }
}
